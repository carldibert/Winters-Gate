/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @header      ID3v2-TextFrame.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    ID3v2 text frame
 */

#include <ID3v2.h>

namespace ID3v2
{
    #ifdef __clang__
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wpadded"
    #endif
    
    class TextFrame::IMPL
    {
        public:
            
            IMPL( void );
            
            std::string  str;
            const char * cStr;
            int          enc;
    };
    
    #ifdef __clang__
    #pragma clang diagnostic pop
    #endif
         
    TextFrame::TextFrame( void ): impl( new IMPL )
    {}
    
    TextFrame::~TextFrame( void )
    {
        delete this->impl;
    }
    
    void TextFrame::ProcessData( void )
    {
        const char * data;
        
        data = this->GetData();
        
        if( data == NULL || this->GetSize() == 0 )
        {
            return;
        }
        
        this->impl->str  = std::string( data + 1, this->GetSize() - 1 );
        this->impl->cStr = data + 1;
        this->impl->enc  = data[ 0 ];
    }
    
    std::string TextFrame::GetStringValue( void ) const
    {
        return this->impl->str;
    }
    
    const char * TextFrame::GetCStringValue( void ) const
    {
        return this->impl->cStr;
    }
    
    int TextFrame::GetStringEncoding( void ) const
    {
        return this->impl->enc;
    }
    
    TextFrame::IMPL::IMPL( void ): cStr( NULL ), enc( 0 )
    {}
}

